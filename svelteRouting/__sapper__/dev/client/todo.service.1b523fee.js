import { e as env } from './env.d2d48e9c.js';

function createTodo(name) {
  const accessToken = JSON.parse(localStorage.getItem('accessToken'));
  const headers = new Headers({
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization': `Bearer ${accessToken}`
  });
    return fetch(`${env()}/todo`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        name,
        status: false
      })
    })
    .then( res => {
        return res
    })
    .catch((err) => errorCheck(err))
  }

  function retrieveListData(){
    const accessToken = JSON.parse(localStorage.getItem('accessToken'));
    const refreshToken = JSON.parse(localStorage.getItem('refreshToken'));
    const headers = new Headers({
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Bearer ${accessToken}`
    });
  
    if (refreshToken == "undefined" && accessToken == "undefined"){
      swal('Error', 'Session Expired, Please Log In', 'error')
      .then(function(){window.location.href = "/";});
    }
     
    return fetch(`${env()}/todo`, {
      method: 'GET',
      headers
    })
    .then(
      (res) => res.json()
    )
   .then(data =>{
      return data
   })
   .catch((err) => errorCheck(err))
 }
 function getSingleItem(itemId){
  const accessToken = JSON.parse(localStorage.getItem('accessToken'));
  JSON.parse(localStorage.getItem('refreshToken'));
  const headers = new Headers({
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization': `Bearer ${accessToken}`
  });
   
  return fetch(`${env()}/todo/${itemId}`, {
    method: 'GET',
    headers
  })
  .then(
    (res) => res.json()
  )
 .then(data =>{
    return data
 })
 .catch((err) => console.log(err))
}
 function removeTodo(id){
  const accessToken = JSON.parse(localStorage.getItem('accessToken'));
  const headers = new Headers({
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization': `Bearer ${accessToken}`
  });

    return fetch(`${env()}/todo/${id}`, {
        method: 'DELETE',
        headers
      }).then( res => {
          return res
      })
      .catch((err) => errorCheck(err))
 }


 function editTodo(id, edit, stat){
  const accessToken = JSON.parse(localStorage.getItem('accessToken'));
  const headers = new Headers({
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization': `Bearer ${accessToken}`
  });
    return fetch(`${env()}/todo/${id}`, {
        method: 'PATCH',
        headers,
        body: JSON.stringify({
            name: edit,
            status: stat
            })
      }).then( res => {
          return res
      })
      .catch((err) => errorCheck(err))
 }

function errorCheck(err){
  if(err){
    swal('Error', 'Session Expired, Please Log In', 'error')
    .then(function(){window.location.href = "/";});
  }
}

 function newAccessTokenGen() {
  const refreshToken = JSON.parse(localStorage.getItem("refreshToken"));
  const headers = new Headers({
    "Content-Type": "application/json",
    "Accept": "application/json",
    "Authorization": `Bearer ${refreshToken}`,
  });
  return fetch(`${env()}/newAccessToken`, {
    method: "POST",
    headers,
  })
    .then((res) => {
      return res.json();
    })
    .then(function checkTokens (data) {
      localStorage.setItem("accessToken", JSON.stringify(data.accessToken));
      if(data.accessToken == "undefined"){
        localStorage.setItem("refreshToken", JSON.stringify("undefined"));
        swal('Error', 'Session Expired', 'error')
        .then(function(){window.location.href = "/";});
      }
    })
    .catch((err) => swal('Error', 'Session Expired', 'error')
    .then(localStorage.setItem("refreshToken", JSON.stringify("undefined")),
    localStorage.setItem("accessToken", JSON.stringify("undefined"))
    )
    .then(function(){window.location.href = "/";}));
}

export { retrieveListData as a, createTodo as c, editTodo as e, getSingleItem as g, newAccessTokenGen as n, removeTodo as r };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
