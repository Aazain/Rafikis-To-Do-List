import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, w as onMount, e as element, b as space, t as text, c as claim_element, f as children, g as claim_space, h as detach_dev, j as claim_text, k as attr_dev, l as add_location, m as toggle_class, n as insert_dev, o as append_dev, x as set_input_value, p as listen_dev, q as set_data_dev, y as run_all, r as noop, u as destroy_each } from './client.194ab07c.js';
import { c as createTodo, a as retrieveListData, r as removeTodo, e as editTodo, n as newAccessTokenGen } from './todo.service.c68207ea.js';
import { a as logOutUser } from './users.service.386690b6.js';
import './env.8f6a26c3.js';

/* src\routes\list.svelte generated by Svelte v3.31.2 */
const file = "src\\routes\\list.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	child_ctx[17] = list;
	child_ctx[18] = i;
	return child_ctx;
}

// (325:5) {#each listData as item}
function create_each_block(ctx) {
	let div6;
	let li;
	let input0;
	let t0;
	let button0;
	let i0;
	let t1;
	let button1;
	let i1;
	let button1_data_target_value;
	let t2;
	let span0;
	let p;
	let t3_value = /*item*/ ctx[16].name + "";
	let t3;
	let t4;
	let div5;
	let div4;
	let div3;
	let div0;
	let h5;
	let t5;
	let t6;
	let button2;
	let span1;
	let t7;
	let t8;
	let div1;
	let input1;
	let input1_placeholder_value;
	let t9;
	let div2;
	let button3;
	let t10;
	let t11;
	let button4;
	let t12;
	let div5_id_value;
	let t13;
	let mounted;
	let dispose;

	function input0_change_handler() {
		/*input0_change_handler*/ ctx[9].call(input0, /*each_value*/ ctx[17], /*item_index*/ ctx[18]);
	}

	function change_handler() {
		return /*change_handler*/ ctx[10](/*item*/ ctx[16]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[11](/*item*/ ctx[16]);
	}

	function click_handler_1() {
		return /*click_handler_1*/ ctx[12](/*item*/ ctx[16]);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[14](/*item*/ ctx[16]);
	}

	const block = {
		c: function create() {
			div6 = element("div");
			li = element("li");
			input0 = element("input");
			t0 = space();
			button0 = element("button");
			i0 = element("i");
			t1 = space();
			button1 = element("button");
			i1 = element("i");
			t2 = space();
			span0 = element("span");
			p = element("p");
			t3 = text(t3_value);
			t4 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			h5 = element("h5");
			t5 = text("TaskEditor");
			t6 = space();
			button2 = element("button");
			span1 = element("span");
			t7 = text("×");
			t8 = space();
			div1 = element("div");
			input1 = element("input");
			t9 = space();
			div2 = element("div");
			button3 = element("button");
			t10 = text("Cancel");
			t11 = space();
			button4 = element("button");
			t12 = text("Save changes");
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			li = claim_element(div6_nodes, "LI", { class: true });
			var li_nodes = children(li);
			input0 = claim_element(li_nodes, "INPUT", { type: true, name: true, class: true });
			t0 = claim_space(li_nodes);
			button0 = claim_element(li_nodes, "BUTTON", { id: true, class: true });
			var button0_nodes = children(button0);
			i0 = claim_element(button0_nodes, "I", { class: true });
			children(i0).forEach(detach_dev);
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			button1 = claim_element(li_nodes, "BUTTON", {
				class: true,
				"data-toggle": true,
				"data-target": true
			});

			var button1_nodes = children(button1);
			i1 = claim_element(button1_nodes, "I", { class: true });
			children(i1).forEach(detach_dev);
			button1_nodes.forEach(detach_dev);
			t2 = claim_space(li_nodes);
			span0 = claim_element(li_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			p = claim_element(span0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			t4 = claim_space(li_nodes);

			div5 = claim_element(li_nodes, "DIV", {
				class: true,
				id: true,
				tabindex: true,
				role: true,
				"aria-labelledby": true,
				"aria-hidden": true
			});

			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true, role: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h5 = claim_element(div0_nodes, "H5", { class: true, id: true });
			var h5_nodes = children(h5);
			t5 = claim_text(h5_nodes, "TaskEditor");
			h5_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);

			button2 = claim_element(div0_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-dismiss": true,
				"aria-label": true
			});

			var button2_nodes = children(button2);
			span1 = claim_element(button2_nodes, "SPAN", { "aria-hidden": true });
			var span1_nodes = children(span1);
			t7 = claim_text(span1_nodes, "×");
			span1_nodes.forEach(detach_dev);
			button2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t8 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			input1 = claim_element(div1_nodes, "INPUT", { type: true, placeholder: true });
			div1_nodes.forEach(detach_dev);
			t9 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			button3 = claim_element(div2_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-dismiss": true
			});

			var button3_nodes = children(button3);
			t10 = claim_text(button3_nodes, "Cancel");
			button3_nodes.forEach(detach_dev);
			t11 = claim_space(div2_nodes);

			button4 = claim_element(div2_nodes, "BUTTON", {
				type: true,
				"data-dismiss": true,
				class: true
			});

			var button4_nodes = children(button4);
			t12 = claim_text(button4_nodes, "Save changes");
			button4_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			t13 = claim_space(div6_nodes);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "type", "checkbox");
			attr_dev(input0, "name", "taskCheck");
			attr_dev(input0, "class", "taskComplete svelte-ce6buw");
			add_location(input0, file, 327, 8, 6147);
			attr_dev(i0, "class", "fa fa-trash w3-medium");
			add_location(i0, file, 328, 111, 6396);
			attr_dev(button0, "id", "deleteBtn");
			attr_dev(button0, "class", "btn btn removeButton pull-right svelte-ce6buw");
			add_location(button0, file, 328, 8, 6293);
			attr_dev(i1, "class", "fa fa-edit w3-medium");
			add_location(i1, file, 329, 108, 6552);
			attr_dev(button1, "class", "editbtn btn btn pull-right svelte-ce6buw");
			attr_dev(button1, "data-toggle", "modal");
			attr_dev(button1, "data-target", button1_data_target_value = "#editorModal" + /*item*/ ctx[16]._id);
			add_location(button1, file, 329, 8, 6452);
			attr_dev(p, "class", "taskItem svelte-ce6buw");
			add_location(p, file, 330, 42, 6641);
			attr_dev(span0, "class", "svelte-ce6buw");
			toggle_class(span0, "checked", /*item*/ ctx[16].status);
			add_location(span0, file, 330, 8, 6607);
			attr_dev(h5, "class", "modal-title");
			attr_dev(h5, "id", "editModalLabel");
			add_location(h5, file, 335, 10, 6998);
			attr_dev(span1, "aria-hidden", "true");
			add_location(span1, file, 337, 11, 7158);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "class", "close");
			attr_dev(button2, "data-dismiss", "modal");
			attr_dev(button2, "aria-label", "Close");
			add_location(button2, file, 336, 10, 7069);
			attr_dev(div0, "class", "modal-header");
			add_location(div0, file, 334, 9, 6960);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "placeholder", input1_placeholder_value = /*item*/ ctx[16].name);
			add_location(input1, file, 341, 10, 7282);
			attr_dev(div1, "class", "modal-body");
			add_location(div1, file, 340, 9, 7246);
			attr_dev(button3, "type", "button");
			attr_dev(button3, "class", "btn btn-secondary");
			attr_dev(button3, "data-dismiss", "modal");
			add_location(button3, file, 344, 10, 7413);
			attr_dev(button4, "type", "button");
			attr_dev(button4, "data-dismiss", "modal");
			attr_dev(button4, "class", "btn btn saveChange svelte-ce6buw");
			add_location(button4, file, 345, 10, 7532);
			attr_dev(div2, "class", "modal-footer");
			add_location(div2, file, 343, 9, 7375);
			attr_dev(div3, "class", "modal-content");
			add_location(div3, file, 333, 8, 6922);
			attr_dev(div4, "class", "modal-dialog");
			attr_dev(div4, "role", "document");
			add_location(div4, file, 332, 8, 6870);
			attr_dev(div5, "class", "modal fade svelte-ce6buw");
			attr_dev(div5, "id", div5_id_value = "editorModal" + /*item*/ ctx[16]._id);
			attr_dev(div5, "tabindex", "-1");
			attr_dev(div5, "role", "dialog");
			attr_dev(div5, "aria-labelledby", "editModalLabel");
			attr_dev(div5, "aria-hidden", "true");
			add_location(div5, file, 331, 8, 6729);
			attr_dev(li, "class", "taskName svelte-ce6buw");
			add_location(li, file, 326, 7, 6116);
			attr_dev(div6, "class", "item");
			add_location(div6, file, 325, 6, 6089);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div6, anchor);
			append_dev(div6, li);
			append_dev(li, input0);
			input0.checked = /*item*/ ctx[16].status;
			append_dev(li, t0);
			append_dev(li, button0);
			append_dev(button0, i0);
			append_dev(li, t1);
			append_dev(li, button1);
			append_dev(button1, i1);
			append_dev(li, t2);
			append_dev(li, span0);
			append_dev(span0, p);
			append_dev(p, t3);
			append_dev(li, t4);
			append_dev(li, div5);
			append_dev(div5, div4);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div0, h5);
			append_dev(h5, t5);
			append_dev(div0, t6);
			append_dev(div0, button2);
			append_dev(button2, span1);
			append_dev(span1, t7);
			append_dev(div3, t8);
			append_dev(div3, div1);
			append_dev(div1, input1);
			set_input_value(input1, /*todoEdit*/ ctx[2]);
			append_dev(div3, t9);
			append_dev(div3, div2);
			append_dev(div2, button3);
			append_dev(button3, t10);
			append_dev(div2, t11);
			append_dev(div2, button4);
			append_dev(button4, t12);
			append_dev(div6, t13);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", input0_change_handler),
					listen_dev(input0, "change", change_handler, false, false, false),
					listen_dev(button0, "click", click_handler, false, false, false),
					listen_dev(p, "click", click_handler_1, false, false, false),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[13]),
					listen_dev(button3, "click", /*resetInputs*/ ctx[3], false, false, false),
					listen_dev(button4, "click", click_handler_2, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*listData*/ 1) {
				input0.checked = /*item*/ ctx[16].status;
			}

			if (dirty & /*listData*/ 1 && button1_data_target_value !== (button1_data_target_value = "#editorModal" + /*item*/ ctx[16]._id)) {
				attr_dev(button1, "data-target", button1_data_target_value);
			}

			if (dirty & /*listData*/ 1 && t3_value !== (t3_value = /*item*/ ctx[16].name + "")) set_data_dev(t3, t3_value);

			if (dirty & /*listData*/ 1) {
				toggle_class(span0, "checked", /*item*/ ctx[16].status);
			}

			if (dirty & /*listData*/ 1 && input1_placeholder_value !== (input1_placeholder_value = /*item*/ ctx[16].name)) {
				attr_dev(input1, "placeholder", input1_placeholder_value);
			}

			if (dirty & /*todoEdit*/ 4 && input1.value !== /*todoEdit*/ ctx[2]) {
				set_input_value(input1, /*todoEdit*/ ctx[2]);
			}

			if (dirty & /*listData*/ 1 && div5_id_value !== (div5_id_value = "editorModal" + /*item*/ ctx[16]._id)) {
				attr_dev(div5, "id", div5_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div6);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(325:5) {#each listData as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div4;
	let div3;
	let div0;
	let a0;
	let t0;
	let t1;
	let h1;
	let a1;
	let i;
	let t2;
	let t3;
	let div1;
	let ul;
	let t4;
	let div2;
	let input;
	let t5;
	let button;
	let t6;
	let mounted;
	let dispose;
	let each_value = /*listData*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			a0 = element("a");
			t0 = text("Log Out");
			t1 = space();
			h1 = element("h1");
			a1 = element("a");
			i = element("i");
			t2 = text(" To Do List");
			t3 = space();
			div1 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div2 = element("div");
			input = element("input");
			t5 = space();
			button = element("button");
			t6 = text("+ New Task");
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a0 = claim_element(div0_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Log Out");
			a0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			h1 = claim_element(div3_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			a1 = claim_element(h1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			i = claim_element(a1_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t2 = claim_text(h1_nodes, " To Do List");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			ul = claim_element(div1_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			input = claim_element(div2_nodes, "INPUT", {
				autocomplete: true,
				class: true,
				type: true,
				id: true,
				name: true,
				placeholder: true
			});

			t5 = claim_space(div2_nodes);
			button = claim_element(div2_nodes, "BUTTON", { type: true, id: true, class: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "+ New Task");
			button_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "/");
			attr_dev(a0, "class", "logout btn btn-dark svelte-ce6buw");
			add_location(a0, file, 317, 3, 5814);
			attr_dev(div0, "class", "registrationBtn svelte-ce6buw");
			add_location(div0, file, 316, 2, 5780);
			attr_dev(i, "class", "fa fa-bars pull-left dropdown svelte-ce6buw");
			add_location(i, file, 320, 52, 5949);
			attr_dev(a1, "href", ".");
			attr_dev(a1, "class", "listSelect svelte-ce6buw");
			add_location(a1, file, 320, 21, 5918);
			attr_dev(h1, "class", "title svelte-ce6buw");
			add_location(h1, file, 320, 2, 5899);
			attr_dev(ul, "class", "svelte-ce6buw");
			add_location(ul, file, 323, 4, 6046);
			attr_dev(div1, "id", "listArea");
			attr_dev(div1, "class", "svelte-ce6buw");
			add_location(div1, file, 322, 3, 6021);
			attr_dev(input, "autocomplete", "off");
			attr_dev(input, "class", "addList svelte-ce6buw");
			attr_dev(input, "type", "text");
			attr_dev(input, "id", "createTask");
			attr_dev(input, "name", "newItem");
			attr_dev(input, "placeholder", "Type Here");
			add_location(input, file, 354, 4, 7792);
			attr_dev(button, "type", "submit");
			attr_dev(button, "id", "footerButton");
			attr_dev(button, "class", "addbtn btn btn-dark svelte-ce6buw");
			add_location(button, file, 355, 6, 7931);
			attr_dev(div2, "class", "footer svelte-ce6buw");
			add_location(div2, file, 353, 5, 7766);
			attr_dev(div3, "class", "list-content svelte-ce6buw");
			add_location(div3, file, 315, 1, 5750);
			attr_dev(div4, "class", "list-container svelte-ce6buw");
			add_location(div4, file, 314, 0, 5719);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div0, a0);
			append_dev(a0, t0);
			append_dev(div3, t1);
			append_dev(div3, h1);
			append_dev(h1, a1);
			append_dev(a1, i);
			append_dev(h1, t2);
			append_dev(div3, t3);
			append_dev(div3, div1);
			append_dev(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(div3, t4);
			append_dev(div3, div2);
			append_dev(div2, input);
			set_input_value(input, /*todoName*/ ctx[1]);
			append_dev(div2, t5);
			append_dev(div2, button);
			append_dev(button, t6);

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*logOut*/ ctx[4], false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[15]),
					listen_dev(button, "click", /*postToList*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*listData, editList, resetInputs, todoEdit, itemEditor, removeFromList, editStatus*/ 461) {
				each_value = /*listData*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*todoName*/ 2 && input.value !== /*todoName*/ ctx[1]) {
				set_input_value(input, /*todoName*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function itemEditor(id) {
	window.location.href = `/item/${id}`;
}

function enter() {
	document.getElementById("createTask").addEventListener("keyup", function (event) {
		if (event.keyCode === 13) {
			event.preventDefault();
			document.getElementById("footerButton").click();
		}
	});
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("List", slots, []);
	let listData = [];
	let todoName = "";
	let todoEdit = "";

	onMount(async () => {
		$$invalidate(0, listData = await retrieveListData());
		newAccessTokenGen();
		enter();
		setInterval(newAccessTokenGen, 3600000);
	});

	function resetInputs() {
		$$invalidate(1, todoName = "");
		$$invalidate(2, todoEdit = "");
	}

	function logOut() {
		logOutUser();
	}

	function postToList() {
		if (!todoName || todoName === "") {
			swal("Error", "Please enter a task", "error");
		} else {
			createTodo(todoName).then(async () => {
				$$invalidate(0, listData = await retrieveListData());
				resetInputs();
			});
		}
	}

	function removeFromList(id) {
		if (!id || id === "") {
			swal("Error", "Please enter a task", "error");
		} else {
			removeTodo(id).then(async () => {
				$$invalidate(0, listData = await retrieveListData());
			});
		}
	}

	function editList(id) {
		if (!id || id === "") {
			swal("Error", "The edit field cannot be empty", "error");
		} else if (!todoEdit || todoEdit === "") {
			swal("Error", "The edit field cannot be empty", "error");
		} else {
			editTodo(id, todoEdit).then(async () => {
				$$invalidate(0, listData = await retrieveListData());
				resetInputs();
			});
		}
	}

	function editStatus(id, name) {
		let editedListData = null;

		for (let i = 0; i < listData.length; i++) {
			const currentListData = listData[i];

			if (currentListData._id === id) {
				editedListData = currentListData;
				break;
			}
		}

		if (!editedListData) {
			throw new Error("error");
		}

		editTodo(id, name, editedListData.status).then(async () => {
			$$invalidate(0, listData = await retrieveListData());
		});
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<List> was created with unknown prop '${key}'`);
	});

	function input0_change_handler(each_value, item_index) {
		each_value[item_index].status = this.checked;
		$$invalidate(0, listData);
	}

	const change_handler = item => editStatus(item._id, item.name);
	const click_handler = item => removeFromList(item._id);
	const click_handler_1 = item => itemEditor(item._id);

	function input1_input_handler() {
		todoEdit = this.value;
		$$invalidate(2, todoEdit);
	}

	const click_handler_2 = item => editList(item._id);

	function input_input_handler() {
		todoName = this.value;
		$$invalidate(1, todoName);
	}

	$$self.$capture_state = () => ({
		onMount,
		createTodo,
		retrieveListData,
		removeTodo,
		editTodo,
		newAccessTokenGen,
		logOutUser,
		listData,
		todoName,
		todoEdit,
		resetInputs,
		logOut,
		postToList,
		removeFromList,
		editList,
		editStatus,
		itemEditor,
		enter
	});

	$$self.$inject_state = $$props => {
		if ("listData" in $$props) $$invalidate(0, listData = $$props.listData);
		if ("todoName" in $$props) $$invalidate(1, todoName = $$props.todoName);
		if ("todoEdit" in $$props) $$invalidate(2, todoEdit = $$props.todoEdit);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		listData,
		todoName,
		todoEdit,
		resetInputs,
		logOut,
		postToList,
		removeFromList,
		editList,
		editStatus,
		input0_change_handler,
		change_handler,
		click_handler,
		click_handler_1,
		input1_input_handler,
		click_handler_2,
		input_input_handler
	];
}

class List extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "List",
			options,
			id: create_fragment.name
		});
	}
}

export default List;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
