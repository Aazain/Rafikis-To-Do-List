import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, e as element, b as space, t as text, c as claim_element, f as children, g as claim_space, h as detach_dev, j as claim_text, k as attr_dev, l as add_location, m as toggle_class, n as insert_dev, o as append_dev, p as listen_dev, q as set_data_dev, r as noop, u as destroy_each } from './client.194ab07c.js';

/* src\routes\index.svelte generated by Svelte v3.31.2 */

const file = "src\\routes\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	child_ctx[3] = list;
	child_ctx[4] = i;
	return child_ctx;
}

// (221:5) {#each listData as item}
function create_each_block(ctx) {
	let div;
	let li;
	let input;
	let t0;
	let button0;
	let i0;
	let t1;
	let button1;
	let i1;
	let button1_data_target_value;
	let t2;
	let span;
	let p;
	let t3_value = /*item*/ ctx[2].name + "";
	let t3;
	let t4;
	let mounted;
	let dispose;

	function input_change_handler() {
		/*input_change_handler*/ ctx[1].call(input, /*each_value*/ ctx[3], /*item_index*/ ctx[4]);
	}

	const block = {
		c: function create() {
			div = element("div");
			li = element("li");
			input = element("input");
			t0 = space();
			button0 = element("button");
			i0 = element("i");
			t1 = space();
			button1 = element("button");
			i1 = element("i");
			t2 = space();
			span = element("span");
			p = element("p");
			t3 = text(t3_value);
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			li = claim_element(div_nodes, "LI", { class: true });
			var li_nodes = children(li);

			input = claim_element(li_nodes, "INPUT", {
				type: true,
				readonly: true,
				name: true,
				class: true
			});

			t0 = claim_space(li_nodes);
			button0 = claim_element(li_nodes, "BUTTON", { disabled: true, id: true, class: true });
			var button0_nodes = children(button0);
			i0 = claim_element(button0_nodes, "I", { class: true });
			children(i0).forEach(detach_dev);
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			button1 = claim_element(li_nodes, "BUTTON", {
				disabled: true,
				class: true,
				"data-toggle": true,
				"data-target": true
			});

			var button1_nodes = children(button1);
			i1 = claim_element(button1_nodes, "I", { class: true });
			children(i1).forEach(detach_dev);
			button1_nodes.forEach(detach_dev);
			t2 = claim_space(li_nodes);
			span = claim_element(li_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			p = claim_element(span_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "checkbox");
			input.readOnly = true;
			attr_dev(input, "name", "taskCheck");
			attr_dev(input, "class", "taskComplete svelte-1j3znfm");
			add_location(input, file, 223, 8, 4096);
			attr_dev(i0, "class", "fa fa-trash w3-medium");
			add_location(i0, file, 224, 80, 4275);
			button0.disabled = true;
			attr_dev(button0, "id", "deleteBtn");
			attr_dev(button0, "class", "btn btn removeButton pull-right svelte-1j3znfm");
			add_location(button0, file, 224, 8, 4203);
			attr_dev(i1, "class", "fa fa-edit w3-medium");
			add_location(i1, file, 225, 117, 4440);
			button1.disabled = true;
			attr_dev(button1, "class", "editbtn btn btn pull-right svelte-1j3znfm");
			attr_dev(button1, "data-toggle", "modal");
			attr_dev(button1, "data-target", button1_data_target_value = "#editorModal" + /*item*/ ctx[2]._id);
			add_location(button1, file, 225, 8, 4331);
			attr_dev(p, "class", "taskItem svelte-1j3znfm");
			add_location(p, file, 226, 44, 4531);
			attr_dev(span, "class", "svelte-1j3znfm");
			toggle_class(span, "checked", /*item*/ ctx[2].status);
			add_location(span, file, 226, 8, 4495);
			attr_dev(li, "class", "taskName svelte-1j3znfm");
			add_location(li, file, 222, 7, 4065);
			attr_dev(div, "class", "item");
			add_location(div, file, 221, 6, 4038);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, li);
			append_dev(li, input);
			input.checked = /*item*/ ctx[2].status;
			append_dev(li, t0);
			append_dev(li, button0);
			append_dev(button0, i0);
			append_dev(li, t1);
			append_dev(li, button1);
			append_dev(button1, i1);
			append_dev(li, t2);
			append_dev(li, span);
			append_dev(span, p);
			append_dev(p, t3);
			append_dev(div, t4);

			if (!mounted) {
				dispose = listen_dev(input, "change", input_change_handler);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*listData*/ 1) {
				input.checked = /*item*/ ctx[2].status;
			}

			if (dirty & /*listData*/ 1 && button1_data_target_value !== (button1_data_target_value = "#editorModal" + /*item*/ ctx[2]._id)) {
				attr_dev(button1, "data-target", button1_data_target_value);
			}

			if (dirty & /*listData*/ 1 && t3_value !== (t3_value = /*item*/ ctx[2].name + "")) set_data_dev(t3, t3_value);

			if (dirty & /*listData*/ 1) {
				toggle_class(span, "checked", /*item*/ ctx[2].status);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(221:5) {#each listData as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div4;
	let div3;
	let div0;
	let a0;
	let t0;
	let t1;
	let a1;
	let t2;
	let t3;
	let h1;
	let a2;
	let i;
	let t4;
	let t5;
	let div1;
	let ul;
	let t6;
	let div2;
	let input;
	let t7;
	let button;
	let t8;
	let each_value = /*listData*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			a0 = element("a");
			t0 = text("Login");
			t1 = space();
			a1 = element("a");
			t2 = text("Sign Up");
			t3 = space();
			h1 = element("h1");
			a2 = element("a");
			i = element("i");
			t4 = text(" To Do List");
			t5 = space();
			div1 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = space();
			div2 = element("div");
			input = element("input");
			t7 = space();
			button = element("button");
			t8 = text("+ New Task");
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a0 = claim_element(div0_nodes, "A", { href: true, class: true, value: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Login");
			a0_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			a1 = claim_element(div0_nodes, "A", { href: true, class: true, value: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "Sign Up");
			a1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			h1 = claim_element(div3_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			a2 = claim_element(h1_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			i = claim_element(a2_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			a2_nodes.forEach(detach_dev);
			t4 = claim_text(h1_nodes, " To Do List");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			ul = claim_element(div1_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			input = claim_element(div2_nodes, "INPUT", {
				autocomplete: true,
				class: true,
				type: true,
				id: true,
				name: true,
				placeholder: true
			});

			t7 = claim_space(div2_nodes);
			button = claim_element(div2_nodes, "BUTTON", { disabled: true, type: true, class: true });
			var button_nodes = children(button);
			t8 = claim_text(button_nodes, "+ New Task");
			button_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "login");
			attr_dev(a0, "class", "loginBtn btn btn-dark svelte-1j3znfm");
			attr_dev(a0, "value", "Login");
			add_location(a0, file, 214, 3, 3686);
			attr_dev(a1, "href", "signUp");
			attr_dev(a1, "class", "signUpBtn btn btn-light svelte-1j3znfm");
			attr_dev(a1, "value", "SignUp");
			add_location(a1, file, 215, 3, 3760);
			attr_dev(div0, "class", "registrationBtn svelte-1j3znfm");
			add_location(div0, file, 213, 2, 3652);
			attr_dev(i, "class", "fa fa-bars pull-left dropdown svelte-1j3znfm");
			add_location(i, file, 217, 53, 3900);
			attr_dev(a2, "href", ".");
			attr_dev(a2, "class", "listSelect svelte-1j3znfm");
			add_location(a2, file, 217, 22, 3869);
			attr_dev(h1, "class", "title svelte-1j3znfm");
			add_location(h1, file, 217, 3, 3850);
			attr_dev(ul, "class", "svelte-1j3znfm");
			add_location(ul, file, 219, 4, 3995);
			attr_dev(div1, "id", "listArea");
			attr_dev(div1, "class", "svelte-1j3znfm");
			add_location(div1, file, 218, 3, 3970);
			attr_dev(input, "autocomplete", "off");
			attr_dev(input, "class", "addList textInput svelte-1j3znfm");
			attr_dev(input, "type", "text");
			attr_dev(input, "id", "createTask");
			attr_dev(input, "name", "newItem");
			attr_dev(input, "placeholder", "Type Here");
			add_location(input, file, 234, 4, 4691);
			button.disabled = true;
			attr_dev(button, "type", "submit");
			attr_dev(button, "class", "addbtn btn btn-dark svelte-1j3znfm");
			add_location(button, file, 235, 4, 4816);
			attr_dev(div2, "class", "footer svelte-1j3znfm");
			add_location(div2, file, 233, 3, 4665);
			attr_dev(div3, "class", "list-content svelte-1j3znfm");
			add_location(div3, file, 212, 1, 3622);
			attr_dev(div4, "class", "list-container svelte-1j3znfm");
			add_location(div4, file, 211, 0, 3591);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div0, a0);
			append_dev(a0, t0);
			append_dev(div0, t1);
			append_dev(div0, a1);
			append_dev(a1, t2);
			append_dev(div3, t3);
			append_dev(div3, h1);
			append_dev(h1, a2);
			append_dev(a2, i);
			append_dev(h1, t4);
			append_dev(div3, t5);
			append_dev(div3, div1);
			append_dev(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(div3, t6);
			append_dev(div3, div2);
			append_dev(div2, input);
			append_dev(div2, t7);
			append_dev(div2, button);
			append_dev(button, t8);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*listData*/ 1) {
				each_value = /*listData*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);

	let listData = [
		{ name: "Welcome" },
		{ name: "To", status: "true" },
		{ name: "Rafiki's" },
		{ name: "To", status: "true" },
		{ name: "Do" },
		{ name: "List", status: "true" }
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	function input_change_handler(each_value, item_index) {
		each_value[item_index].status = this.checked;
		$$invalidate(0, listData);
	}

	$$self.$capture_state = () => ({ listData });

	$$self.$inject_state = $$props => {
		if ("listData" in $$props) $$invalidate(0, listData = $$props.listData);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [listData, input_change_handler];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
